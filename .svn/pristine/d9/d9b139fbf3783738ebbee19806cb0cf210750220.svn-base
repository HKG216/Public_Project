using KMU.HisOrder.MVC.Areas.Maintenance.ViewModels;
using KMU.HisOrder.MVC.Areas.MedicalRecord.ViewModels;
using KMU.HisOrder.MVC.Extesion;
using KMU.HisOrder.MVC.Models;
using System.Numerics;
using System.Runtime.Intrinsics.Arm;
using System.Xml.Linq;
using static KMU.HisOrder.MVC.Models.EnumClass;

namespace KMU.HisOrder.MVC.Areas.Maintenance.Models
{
    public class ClinicScheduleService : IDisposable
    {
        private readonly KMUContext _context;


        public ClinicScheduleService(KMUContext context)
        {
            _context = context;
        }

        public void Dispose() => Dispose(disposing: true);

        /// <summary>
        /// Releases all resources currently used by this <see cref="Controller"/> instance.
        /// </summary>
        /// <param name="disposing"><c>true</c> if this method is being invoked by the <see cref="Dispose()"/> method,
        /// otherwise <c>false</c>.</param>
        protected virtual void Dispose(bool disposing)
        {
        }

        #region Public Function

        /// <summary>
        /// 取得診間清單
        /// </summary>
        /// <param name="week"></param>
        /// <param name="room"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns></returns>
        public ScheduleListReturn GetScheduleDataForMaintain(string week, string room, string type, EnumClass.DisplayLanguage language)
        {
            #region Variable Setting

            ScheduleListReturn result = new ScheduleListReturn();
            List<ScheduleData> sdList = new List<ScheduleData>();
            List<ClinicSchedule> clinicList = new List<ClinicSchedule>();

            #endregion

            #region Step 1. Check Input Variables

            if (string.IsNullOrEmpty(week) &&
                string.IsNullOrEmpty(room) &&
                string.IsNullOrEmpty(type))
            {
                result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.EmptyParam, language);
                return result;
            }

            #endregion

            using (DepartmentService deptService = new DepartmentService(_context))
            {
                try
                {
                    switch (type)
                    {
                        case "Week":
                            clinicList = _context.ClinicSchedules.Where(c => c.ScheWeek == week).ToList();
                            break;
                        case "Room":
                            if (!string.IsNullOrEmpty(room))
                            {
                                clinicList = _context.ClinicSchedules.Where(c => c.ScheRoom == room).ToList();
                            }
                            else
                            {
                                result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.EmptyParam, language);
                                return result;
                            }
                            break;
                    }

                    if (clinicList.Any())
                    {
                        foreach (var item in clinicList)
                        {
                            ScheduleData sd = new ScheduleData()
                            {
                                SCHE_WEEK = item.ScheWeek,
                                SCHE_NOON = item.ScheNoon,
                                SCHE_ROOM = item.ScheRoom,
                                SCHE_DPT = item.ScheDptCode,
                                SCHE_DPT_NAME = item.ScheDptName,
                                SCHE_DOCTOR_CODE = item.ScheDoctor,
                                SCHE_DOCTOR_NAME = item.ScheDoctorName,
                                DEFAULT_ATTR = deptService.getDefaultAttribute(item.ScheDptCode),
                                REMARK = item.ScheRemark,
                                enumOpenFlag = item.ScheOpenFlag == EnumClass.OpenFlag.On.EnumToCode() ? EnumClass.OpenFlag.On : EnumClass.OpenFlag.Off,
                                SCHE_PARENT_DPT = deptService.getParentDpt(item.ScheDptCode),
                                DPT_CATEGORY = deptService.getCategory(item.ScheDptCode)
                            };

                            sd.SCHE_PARENT_DPT_NAME = deptService.getDeptName(sd.SCHE_PARENT_DPT);

                            sdList.Add(sd);
                        }

                        sdList = sdList.OrderBy(c => c.SCHE_WEEK).ThenBy(c => c.SCHE_ROOM).ToList();

                        result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.ReplyOK, language);
                        result.sdList = sdList;
                    }
                    else
                    {
                        result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.ReplyOK, language);
                        result.sdList = sdList;
                        return result;
                    }
                }
                catch (Exception ex)
                {
                    result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.SystemError, language);
                    result.sdList = new List<ScheduleData>();

                    return result;
                }
            }

            return result;

        }

        /// <summary>
        /// 更新開診狀態
        /// </summary>
        /// <param name="week"></param>
        /// <param name="noon"></param>
        /// <param name="room"></param>
        /// <param name="language"></param>
        /// <returns></returns>
        public OpenFlagReturn UpdateOpenFlag(string week, string noon, string room, string ModifyID, EnumClass.DisplayLanguage language)
        {
            #region Variable Setting

            OpenFlagReturn result = new OpenFlagReturn();
            List<ClinicSchedule> clinicList = new List<ClinicSchedule>();
            string? originalFlag = "";
            #endregion

            #region Step 1. Check Input Variables

            if (string.IsNullOrEmpty(week) &&
                string.IsNullOrEmpty(noon) &&
                string.IsNullOrEmpty(room))
            {
                result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.EmptyParam, language);
                return result;
            }

            #endregion

            try
            {
                clinicList = _context.ClinicSchedules.Where(c => c.ScheWeek == week &&
                                                               c.ScheNoon == noon &&
                                                               c.ScheRoom == room).ToList();
                if (clinicList.Any())
                {
                    ClinicSchedule clinic = clinicList.First();
                    clinic = clinicList.First();

                    originalFlag = clinic.ScheOpenFlag;

                    if (originalFlag == "N")
                    {
                        clinic.ScheOpenFlag = EnumClass.OpenFlag.On.EnumToCode();
                    }
                    else
                    {
                        clinic.ScheOpenFlag = EnumClass.OpenFlag.Off.EnumToCode();
                    }

                    clinic.ModifyUser = ModifyID;
                    clinic.ModifyTime = DateTime.Now;
                    _context.SaveChanges();

                    result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.ReplyOK, language);
                    result.NewFlag = clinic.ScheOpenFlag;
                }
                else
                {
                    result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.SystemError, language);
                    return result;
                }
            }
            catch (Exception ex)
            {

                result.ReturnT = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.SystemError, language);

                return result;
            }

            return result;
        }

        public ScheduleData GetScheduleModal(string week, string noon, string room)
        {
            #region Variable Setting

            ScheduleData result = new ScheduleData();

            #endregion

            try
            {
                var Dtos = _context.ClinicSchedules.Where(c => c.ScheWeek == week &&
                                                             c.ScheNoon == noon &&
                                                             c.ScheRoom == room);

                if (Dtos.Any())
                {
                    using (DepartmentService deptService = new DepartmentService(_context))
                    {
                        ClinicSchedule clinic = Dtos.First();
                        clinic = Dtos.First();

                        result.SCHE_WEEK = clinic.ScheWeek;
                        result.SCHE_NOON = clinic.ScheNoon;
                        result.SCHE_ROOM = clinic.ScheRoom;
                        result.SCHE_DPT = clinic.ScheDptCode;
                        result.SCHE_DPT_NAME = clinic.ScheDptName;
                        result.SCHE_DOCTOR_CODE = clinic.ScheDoctor;
                        result.SCHE_DOCTOR_NAME = clinic.ScheDoctorName;
                        result.REMARK = clinic.ScheRemark;
                        foreach (EnumClass.OpenFlag open in Enum.GetValues(typeof(OpenFlag)))
                        {
                            if (open.EnumToCode() == clinic.ScheOpenFlag)
                            {
                                result.enumOpenFlag = open;
                                break;
                            }
                        }
                        result.SCHE_PARENT_DPT = deptService.getParentDpt(clinic.ScheDptCode);
                        result.DPT_CATEGORY = deptService.getCategory(clinic.ScheDptCode);
                    }
                }
            }
            catch (Exception ex)
            {

            }

            return result;
        }

        public ReturnMsg ModifyScheduleData(string week,
            string noon,
            string room,
            string dpt,
            string dptName,
            string doctor,
            string doctorName,
            string openFlag,
            string remark,
            string ModifyID,
            DisplayLanguage language)
        {
            #region Variable Setting

            ReturnMsg result = new ReturnMsg();
            List<ClinicSchedule> clinicList = new List<ClinicSchedule>();
            List<KmuUser> userList = new List<KmuUser>();
            List<KmuDepartment> deptList = new List<KmuDepartment>();
            EnumClass.ReplyNoCode replyCode = EnumClass.ReplyNoCode.ReplyOK;
            #endregion

            #region Step 1. Check Input Variables

            if (string.IsNullOrEmpty(week) ||
                string.IsNullOrEmpty(noon) ||
                string.IsNullOrEmpty(room) ||
                string.IsNullOrEmpty(dpt) ||
                string.IsNullOrEmpty(doctor) ||
                string.IsNullOrEmpty(ModifyID))
            {
                result = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.EmptyParam, language);
                return result;
            }

            #endregion

            #region Step 2. Check Doctor ID & Department Code

            userList = _context.KmuUsers.Where(c=>c.UserIdno == doctor).ToList();

            if (!userList.Any())
            {
                result = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.DoctorIsntExist, language);

                return result;
            }

            deptList = _context.KmuDepartments.Where(c => c.DptCode == dpt).ToList();

            if (!deptList.Any())
            {
                result = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.DeptIsntExist, language);

                return result;
            }

            #endregion

            try
            {
                clinicList = _context.ClinicSchedules.Where(c => c.ScheWeek == week &&
                                                               c.ScheNoon == noon &&
                                                               c.ScheRoom == room).ToList();

                if (!clinicList.Any())
                {
                    //Create
                    replyCode = CreateClinicSchedule(week, noon, room, dpt, dptName, doctor, doctorName, openFlag, remark, ModifyID);
                    result = MessageFunction.GetFullReplyNoMsg(replyCode, language);
                }
                else
                {
                    //Update
                    ClinicSchedule clinic = clinicList.FirstOrDefault();
                    try
                    {
                        clinic.ScheDptCode = dpt;
                        clinic.ScheDptName = dptName;
                        clinic.ScheDoctor = doctor;
                        clinic.ScheDoctorName = doctorName;
                        clinic.ScheOpenFlag = openFlag;
                        clinic.ScheRemark = remark;

                        clinic.ModifyUser = ModifyID;
                        clinic.ModifyTime = DateTime.Now;

                        _context.SaveChanges();

                        result = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.ReplyOK, language);
                    }
                    catch (Exception ex)
                    {
                        result = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.SystemError, language);

                        return result;
                    }

                }
            }
            catch (Exception ex)
            {
                result = MessageFunction.GetFullReplyNoMsg(EnumClass.ReplyNoCode.SystemError, language);

                return result;
            }

            return result;
        }

        public List<ScheduleData> getCanReserveClinicByDate(DateTime date, string reserveType)
        {
            #region Variable Setting

            List<ClinicSchedule> clinicList = new List<ClinicSchedule>();
            List<ScheduleData> scheduleList = new List<ScheduleData>();

            #endregion

            using (DepartmentService deptService = new DepartmentService(_context))
            {

                try
                {

                    clinicList = (from c in _context.ClinicSchedules.Where(c => c.ScheWeek.Equals(date.DayOfWeek.ToString("d")) &&
                                                                     c.ScheOpenFlag.Equals(EnumClass.OpenFlag.On.EnumToCode()))
                                  join d in _context.KmuDepartments.Where(c => c.DptCategory == reserveType)
                                  on c.ScheDptCode equals d.DptCode
                                  select c).ToList();


                    foreach (var item in clinicList)
                    {
                        ScheduleData schedule = new ScheduleData();
                        schedule.SCHE_WEEK = item.ScheWeek.ToString();
                        schedule.SCHE_ROOM = item.ScheRoom.ToString();
                        schedule.SCHE_NOON = item.ScheNoon.ToString();
                        schedule.SCHE_DOCTOR_CODE = item.ScheDoctor;
                        schedule.SCHE_DOCTOR_NAME = item.ScheDoctorName;
                        schedule.SCHE_DPT = item.ScheDptCode;
                        schedule.SCHE_DPT_NAME = item.ScheDptName;
                        schedule.DEFAULT_ATTR = deptService.getDefaultAttribute(item.ScheDptCode);
                        schedule.SCHE_PARENT_DPT = deptService.getParentDpt(item.ScheDptCode);
                        schedule.SCHE_PARENT_DPT_NAME = deptService.getDeptName(schedule.SCHE_PARENT_DPT);
                        foreach (EnumClass.OpenFlag open in Enum.GetValues(typeof(OpenFlag)))
                        {
                            if (open.EnumToCode() == item.ScheOpenFlag)
                            {
                                schedule.SCHE_DPT_NAME = item.ScheDptName;
                                break;
                            }
                        }

                        scheduleList.Add(schedule);
                    }
                }
                catch (Exception ex)
                {

                }
            }
            return scheduleList;
        }

        public List<ClinicScheduleItem> GetScheduleDataForHisOrder(string[] SoucreType, DateOnly ClinicDate, string? DoctorCode)
        {
            List<ClinicScheduleItem> scheduleList = new List<ClinicScheduleItem>();
            //var Schedule = (from c in _context.ClinicSchedules.Where(c=>c.)

            if (ClinicDate >= DateOnly.FromDateTime(DateTime.Today))
            {
                var clinicData = _context.ClinicSchedules.Where(c => c.ScheWeek == ClinicDate.DayOfWeek.ToString("d") &&
                                                                     c.ScheOpenFlag == EnumClass.OpenFlag.On.EnumToCode());

                var Data = clinicData.Select(c => new { c.ScheWeek, c.ScheDptCode, c.ScheNoon, c.ScheDoctor, c.ScheRoom }).Distinct().OrderBy(c => c.ScheRoom);
                foreach (var clinic in Data)
                {
                    KMUContext _inContext = new KMUContext();
                    var dept = _inContext.KmuDepartments.Where(c => c.DptCode == clinic.ScheDptCode).FirstOrDefault();
                    if (dept.DptCategory != "EMG")
                    {
                        if (!string.IsNullOrEmpty(DoctorCode) && clinic.ScheDoctor != DoctorCode)
                        {
                            continue;
                        }
                    }
                    if (SoucreType.Contains(dept.DptCategory))
                    {
                        using (CommonService cService = new CommonService(_context))
                        {
                            ClinicScheduleItem input = new ClinicScheduleItem()
                            {
                                CLINIC_TYPE = dept.DptCategory,
                                SCHE_WEEK = clinic.ScheWeek,
                                SCHE_DATE = ClinicDate,
                                SCHE_DPT = clinic.ScheDptCode,
                                SCHE_DPT_NAME = dept.DptName,
                                SCHE_NOON = clinic.ScheNoon,
                                SCHE_DOCTOR_CODE = clinic.ScheDoctor,
                                SCHE_DOCTOR_NAME = cService.GetEmpName(clinic.ScheDoctor),
                                SCHE_ROOM = clinic.ScheRoom
                            };
                            scheduleList.Add(input);
                        }
                    }
                    _inContext.Dispose();
                }
            }
            else
            {
                /*依據registration去抓*/

                var regData = _context.Registrations.Where(c => c.RegDate == ClinicDate);

                var Data = regData.Select(c => new { c.RegDate, c.RegDepartment, c.RegNoon, c.RegDoctorId, c.RegRoomNo }).Distinct().OrderBy(c => c.RegRoomNo);
                foreach (var reg in Data)
                {
                    KMUContext _inContext = new KMUContext();
                    var dept = _inContext.KmuDepartments.Where(c => c.DptCode == reg.RegDepartment).FirstOrDefault();

                    if (dept.DptCategory != "EMG")
                    {
                        if (!string.IsNullOrEmpty(DoctorCode) && reg.RegDoctorId != DoctorCode)
                        {
                            continue;
                        }
                    }

                    if (SoucreType.Contains(dept.DptCategory))
                    {
                        using (CommonService cService = new CommonService(_context))
                        {
                            ClinicScheduleItem input = new ClinicScheduleItem()
                            {
                                CLINIC_TYPE = dept.DptCategory,
                                SCHE_WEEK = reg.RegDate.DayOfWeek.ToString("d"),
                                SCHE_DATE = reg.RegDate,
                                SCHE_DPT = reg.RegDepartment,
                                SCHE_DPT_NAME = dept.DptName,
                                SCHE_NOON = reg.RegNoon,
                                SCHE_DOCTOR_CODE = reg.RegDoctorId,
                                SCHE_DOCTOR_NAME = cService.GetEmpName(reg.RegDoctorId),
                                SCHE_ROOM = reg.RegRoomNo
                            };

                            scheduleList.Add(input);
                        }
                    }
                    _inContext.Dispose();
                }
            }

            return scheduleList;
        }

        #endregion


        #region Private Function

        private EnumClass.ReplyNoCode CreateClinicSchedule(
            string week,
            string noon,
            string room,
            string dpt,
            string dptName,
            string doctor,
            string doctorName,
            string openFlag,
            string remark,
            string modifyID)
        {
            #region Variable Setting

            EnumClass.ReplyNoCode replyCode = ReplyNoCode.ReplyOK;

            #endregion

            try
            {
                ClinicSchedule clinic = new ClinicSchedule();

                clinic.ScheWeek = week;
                clinic.ScheNoon = noon;
                clinic.ScheRoom = room;
                clinic.ScheDptCode = dpt;
                clinic.ScheDptName = dptName;
                clinic.ScheDoctor = doctor;
                clinic.ScheDoctorName = doctorName;
                clinic.ScheOpenFlag = openFlag;
                clinic.ScheRemark = remark;

                clinic.ModifyUser = modifyID;
                clinic.ModifyTime = DateTime.Now;

                _context.ClinicSchedules.Add(clinic);
                _context.SaveChanges();

                replyCode = ReplyNoCode.ReplyOK;
            }
            catch (Exception ex)
            {
                replyCode = EnumClass.ReplyNoCode.SystemError;
            }

            return replyCode;
        }

        #endregion
    }
}
