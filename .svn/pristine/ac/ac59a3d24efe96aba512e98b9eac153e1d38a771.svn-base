using KMU.HisOrder.MVC.Areas.HisOrder.Models;
using KMU.HisOrder.MVC.Areas.Maintenance.Models;
using KMU.HisOrder.MVC.Areas.Maintenance.ViewModels;
using KMU.HisOrder.MVC.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.TagHelpers;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Newtonsoft.Json;
using NuGet.Packaging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Security.Policy;
using static System.Net.Mime.MediaTypeNames;

namespace KMU.HisOrder.MVC.Areas.HisOrder.Controllers
{
    [Area("HisOrder")]
    public class HisOrderController : Controller
    {
        private readonly KMUContext _context;

        public HisOrderController(KMUContext context)
        {
            _context = context;
        }

        #region View Function

        public IActionResult Index()
        {


            var checklogin = HttpContext.Session.GetObject<LoginDTO>("LoginDTO");
            if (checklogin == null || string.IsNullOrWhiteSpace(checklogin.EMPCODE))
            {
                return RedirectToAction("Login/Index");
            }

            var gv = new GlobalVariableDTO()
            {
                Clinic = HttpContext.Session.GetObject<ClinicDTO>("ClinicDTO"),
                Login = HttpContext.Session.GetObject<LoginDTO>("LoginDTO")
            };

            if (gv.Clinic == null)
            {
                IniatializeSessionClinicDto(
                        gv.Clinic == null ? null : gv.Clinic.RegDate,
                        gv.Clinic == null ? null : gv.Clinic.DeptCode,
                        "A",
                        gv.Login.EMPCODE,
                        gv.Login.EMPCODE
                        );
                gv.Clinic = HttpContext.Session.GetObject<ClinicDTO>("ClinicDTO");
            }
            if (gv.Clinic == null)
            {
                ViewBag.DisPlaySwithClinicModal = true;
                ViewBag.DisPlayDefaultRegDate = DateTime.Today;
            }
            else
            {
                ViewBag.DisPlaySwithClinicModal = false;
                ViewBag.DisPlayDefaultClinic = gv.Clinic;
                ViewBag.DisPlayDefaultRegDate = gv.Clinic.RegDate;
            }

            var patientData = InitializePatientList();
            ViewBag.clinicScheList = GetClinicScheList(gv.Login.EMPCODE, gv.Clinic == null ? DateTime.Today : gv.Clinic.RegDate);
            ViewBag.loginDTO = gv.Login;
            return View(patientData);
        }



        [HttpPost]
        public ActionResult SwitchClinic(string clinicDate, string clinicDeptCode, string clinicRoomNo, string clinicDoctorId, string loginId)
        {

            //    DateTime.Parse(clinicInfo["clinic-date"].Trim()),
            //    clinicInfo["clinic-dept-code"].Trim(),
            //    clinicInfo["clinic-noon-no"].Trim(),
            //    clinicInfo["clinic-doctor-id"].Trim(),
            //    clinicInfo["login-id"].Trim(),
            //    clinicInfo["clinic-doctor-id"].Trim()

            var checklogin = HttpContext.Session.GetObject<LoginDTO>("LoginDTO");
            if (checklogin == null || string.IsNullOrWhiteSpace(checklogin.EMPCODE))
            {
                return RedirectToAction("Login/Index");
            }

            IniatializeSessionClinicDto(
                    DateTime.Parse(clinicDate),
                    clinicDeptCode,
                    "AM",
                    checklogin.EMPCODE,
                    checklogin.EMPCODE
                    );

            var _clinicDTO = HttpContext.Session.GetObject<ClinicDTO>("ClinicDTO");

            if (_clinicDTO == null)
            {
                ViewBag.DisPlaySwithClinicModal = true;
                ViewBag.DisPlayDefaultRegDate = DateTime.Today;
            }
            else
            {
                ViewBag.DisPlaySwithClinicModal = false;
                ViewBag.DisPlayDefaultClinic = _clinicDTO;
                ViewBag.DisPlayDefaultRegDate = _clinicDTO.RegDate;
            }

            var patientData = GetPatientList(DateTime.Parse(clinicDate), clinicDeptCode);
            ViewBag.clinicScheList = GetClinicScheList(checklogin.EMPCODE, _clinicDTO == null ? DateTime.Today : _clinicDTO.RegDate);
            ViewBag.loginDTO = checklogin;
            return View("Index", patientData);
        }

        /// <summary>
        /// ClinicOrder畫面(SOAP、藥品、檢驗、檢查...)
        /// </summary>
        /// <returns></returns>
        /// 
        public ActionResult ClinicOrder()
        {
            //viewbag assign
            ViewBag.htmlbody = HttpContext.Session.GetString("htmlBody");
            //ViewBag.htmlbodyActive =  HttpContext.Session.GetString("htmlbodyActive");
            return View();
        }


        [HttpPost]
        public ActionResult PatientVisit(string patientInhospid, string patientPatientid, string patientVisitStatus, string htmlBody, string htmlBodyActive)
        {

            if (string.IsNullOrWhiteSpace(patientInhospid) || string.IsNullOrWhiteSpace(patientPatientid))
            {
                return RedirectToAction("Index");
            }
            else
            {
                //取得 patient session data
                var patientInfo = GetPatientInfo(patientInhospid, patientPatientid);

                IniatializeSessionPatientDto(patientInfo);


                //取得 hisorderplan
                var hplanList = GetHisOrderPlanList(patientInhospid, patientPatientid);

                if (hplanList != null)
                {
                    ViewBag.MedList = hplanList.Where(c => c.HplanType == "Med" && c.DcDate == null).OrderByDescending(c => c.SeqNo).ToList();
                    ViewBag.NonMedList = hplanList.Where(c => (c.HplanType != "Med" && c.HplanType != "ICD") && c.DcDate == null).OrderByDescending(c => c.SeqNo).ToList();
                }

                //取得 soap
                List<hisordersoa_version> soapVersion = null;
                using (SoapController _soapController = new SoapController(_context, null))
                {

                    //var regdata = _context.Registrations.Where(c => c.Inhospid == patientInhospid).FirstOrDefault();
                    //var souretype = (regdata != null && regdata.RegDepartment.Substring(0, 2) != "16") ? "OPD" : "EMG";

                    soapVersion = _soapController.querySoapVer(patientInhospid);
                    ViewBag.SoapVersion = soapVersion;
                }

                //取得藥品相關設定
                ViewBag.MedFreq = _context.KmuMedfrequencies.ToList();
                ViewBag.MedIndication = _context.KmuMedfrequencyInds.ToList();
                ViewBag.MedPathWay = _context.KmuMedpathways.ToList();
                ViewBag.MedItem = JsonConvert.SerializeObject(_context.KmuMedicines.ToList());

                //取得 diagnosis 
                //to do...

                //取得 allergy
                //to do...

                //畫面左側bar設定
                HttpContext.Session.SetString("htmlBody", htmlBody);


                //取得歷史病歷頭檔
                ViewBag.HistoryRecordMaster = getHistoryRecordMaster(patientInfo.RegDate.Value.AddMonths(-6), patientInfo.RegDate, patientInfo.RegPatientId);

                //開啟看診畫面
                //return RedirectToAction("ClinicOrder");
                return View("ClinicOrder", patientInfo);
            }

        }

        #endregion

        #region init Function

        private void IniatializeSessionClinicDto(DateTime? regDate, string deptCode, string noonNo, string doctorCode, string loginCode, string authdoctorCode = null)
        {

            DateTime _regDate = regDate == null ? DateTime.Now : (DateTime)regDate;

            if (string.IsNullOrWhiteSpace(deptCode))
            {
                return;
            }
            else
            {
                var clinicInfo = GetDefaultClinicInfo(_regDate, deptCode, "AM", doctorCode, loginCode, null);
                var deptInfo = _context.KmuDepartments.Where(c => c.DptCode == deptCode).FirstOrDefault();


                if (clinicInfo != null)
                {
                    HttpContext.Session.SetObject("ClinicDTO", new ClinicDTO()
                    {
                        DeptCode = clinicInfo.ScheDptCode,
                        DeptName = clinicInfo.ScheDptName,
                        RegDate = _regDate,
                        DoctorCode = clinicInfo.ScheDoctor,
                        DoctorName = clinicInfo.ScheDoctorName,
                        NoonNO = noonNo,
                        RoomNumber = clinicInfo.ScheRoom,
                        InhospType = deptInfo.DptCategory
                    }); ;
                }
            }

        }


        private void IniatializeSessionPatientDto(PatientDTO inPatientInfo)
        {
            HttpContext.Session.SetObject("PatientDTO", inPatientInfo);
        }

        private List<PatientDTO> InitializePatientList()
        {
            var gv = new GlobalVariableDTO()
            {
                Clinic = HttpContext.Session.GetObject<ClinicDTO>("ClinicDTO"),
                Patient = HttpContext.Session.GetObject<PatientDTO>("PatientDTO"),
                Login = HttpContext.Session.GetObject<LoginDTO>("LoginDTO")
            };


            if (gv.Login == null)
            {
                throw new Exception("看診資訊或登入者資訊有錯! 可能發呆太久 Sesssion Timeout...");
            }

            if (gv.Clinic == null)
            {
                return new List<PatientDTO>();
            }
            else
            {
                return GetPatientList(gv.Clinic.RegDate, gv.Clinic.DeptCode);
            }
        }



        #endregion

        #region get data Function
        /// <summary>
        /// 取得病人清單
        /// </summary>
        /// <param name="inRegDate"></param>
        /// <param name="inDeptCode"></param>
        /// <returns></returns>
        public List<PatientDTO> GetPatientList(DateTime inRegDate, string inDeptCode)
        {
            var ptData = from d in _context.Set<Registration>()
                         join chart in _context.Set<KmuChart>()
                         on d.RegPatientId equals chart.ChrPatientId
                         where d.RegDate == DateOnly.FromDateTime(inRegDate) && d.RegDepartment == inDeptCode
                         select new PatientDTO
                         {
                             Inhospid = d.Inhospid,
                             RegPatientId = d.RegPatientId,
                             RegSeqNo = d.RegSeqNo,
                             RegStatus = d.RegStatus,
                             NationalId = chart.ChrNationalId,
                             FirstName = chart.ChrPatientFirstname,
                             MidName = chart.ChrPatientMidname,
                             LastName = chart.ChrPatientLastname,
                             Sex = chart.ChrSex,
                             MobilePhone = chart.ChrMobilePhone,
                             BirthDate = chart.ChrBirthDate == null ? null : chart.ChrBirthDate.Value.ToDateTime(TimeOnly.Parse("00:00 AM")),
                             Age = chart.ChrBirthDate == null ? -1 : DateTime.Now.Year - chart.ChrBirthDate.Value.Year,
                             RegDate = d.RegDate.ToDateTime(TimeOnly.Parse("00:00 AM")),
                             RegDept = d.RegDepartment,
                             RegNoon = d.RegNoon,
                             transfer_code =d.RegFollowCode,
                             transfer_des = d.RegFollowDesc
                         };

            if (ptData.Any())
            {
                return ptData.ToList();
            }
            else
            {
                return new List<PatientDTO>();
            }
        }
        /// <summary>
        /// 取得診間單一病人資料
        /// </summary>
        /// <param name="inhospid"></param>
        /// <param name="inPatientid"></param>
        /// <returns></returns>
        public PatientDTO GetPatientInfo(string inhospid, string inPatientid)
        {
            if (string.IsNullOrWhiteSpace(inhospid) || string.IsNullOrWhiteSpace(inPatientid))
            {
                return null;
            }
            else
            {
                var ptData = from d in _context.Set<Registration>()
                             join chart in _context.Set<KmuChart>()
                             on d.RegPatientId equals chart.ChrPatientId
                             where d.Inhospid == inhospid && d.RegPatientId == inPatientid

                             select new PatientDTO
                             {
                                 Inhospid = d.Inhospid,
                                 RegPatientId = d.RegPatientId,
                                 RegSeqNo = d.RegSeqNo,
                                 RegStatus = d.RegStatus,
                                 NationalId = chart.ChrNationalId,
                                 FirstName = chart.ChrPatientFirstname,
                                 MidName = chart.ChrPatientMidname,
                                 LastName = chart.ChrPatientLastname,
                                 Sex = chart.ChrSex,
                                 MobilePhone = chart.ChrMobilePhone,
                                 BirthDate = chart.ChrBirthDate == null ? null : chart.ChrBirthDate.Value.ToDateTime(TimeOnly.Parse("00:00 AM")),
                                 Age = chart.ChrBirthDate == null ? -1 : DateTime.Now.Year - chart.ChrBirthDate.Value.Year,
                                 Address = chart.ChrAddress,
                                 RegDate = d.RegDate.ToDateTime(TimeOnly.Parse("00:00 AM")),
                                 RegDept = d.RegDepartment,
                                 RegNoon = d.RegNoon,
                                 transfer_code = d.RegFollowCode,
                                 transfer_des = d.RegFollowDesc
                             };

                if (ptData.Any())
                {
                    return ptData.FirstOrDefault();
                }
                else
                {
                    return null;
                }
            }
        }

        private ClinicSchedule GetDefaultClinicInfo(System.DateTime inREGISTER_DATE, string inDeptCode, string inNOON_NO, string inDoctorCode, string inEmpcode, string inAuthDoctorCode)
        {
            var scheWeek = (int)inREGISTER_DATE.DayOfWeek;
            var clinicData = _context.ClinicSchedules.Where(c => c.ScheWeek == scheWeek.ToString() && c.ScheDptCode == inDeptCode).FirstOrDefault();

            return clinicData;

        }
        private List<ClinicScheduleItem> GetClinicScheList(string inDoctorCode, DateTime inRegDate)
        {
            if (string.IsNullOrWhiteSpace(inDoctorCode))
            {
                throw new Exception();
            }
            else
            {
                //var scheData = new List<ClinicSchedule>();
                var scheWeek = (int)inRegDate.DayOfWeek;

                var data_opd = _context.ClinicSchedules.Where(c => c.ScheDoctor == inDoctorCode && c.ScheWeek == scheWeek.ToString() && c.ScheNoon == "AM");
                var data_er = _context.ClinicSchedules.Where(c => c.ScheWeek == scheWeek.ToString() && c.ScheDptCode.Substring(0, 2) == "16");

                using (ClinicScheduleService service = new ClinicScheduleService(_context))
                {
                    var data = service.GetScheduleDataForHisOrder(new string[] { "OPD", "EMG" }, DateOnly.FromDateTime(inRegDate), inDoctorCode);


                    if (data.Any())
                    {
                        return data;
                    }
                    else
                    {
                        return new List<ClinicScheduleItem>();
                    }
                }

            }
        }


        private List<Hisorderplan> GetHisOrderPlanList(string inhospid, string inPatientid)
        {
            if (string.IsNullOrWhiteSpace(inhospid) || string.IsNullOrWhiteSpace(inPatientid))
            {
                return null;
            }
            else
            {
                var hplan = _context.Hisorderplans.Where(c => c.Inhospid == inhospid && c.ChartNo == inPatientid && c.DcStatus != '2').OrderBy(d => d.SeqNo);
                if (hplan.Any())
                {
                    return hplan.ToList();
                }
                else
                {
                    return null;
                }
            }

        }


        #endregion

        #region getGlobalVariableDTO
        public GlobalVariableDTO getGlobalVariablDTO(HttpContext httpContext)
        {
            var grv = new GlobalVariableDTO();

            if (httpContext.Session.GetObject<ClinicDTO>("ClinicDTO") != null)
            {
                grv.Clinic = httpContext.Session.GetObject<ClinicDTO>("ClinicDTO");
            }

            if (httpContext.Session.GetObject<LoginDTO>("LoginDTO") != null)
            {
                grv.Login = httpContext.Session.GetObject<LoginDTO>("LoginDTO");
            }


            if (httpContext.Session.GetObject<PatientDTO>("PatientDTO") != null)
            {
                grv.Patient = httpContext.Session.GetObject<PatientDTO>("PatientDTO");
            }



            return grv;

        }
        #endregion


        #region History Record 相關

        public List<HistoryRecordDto> getHistoryRecordMaster(DateTime? inBeginDate, DateTime? inEndDate, string inChartNo)
        {
            try
            {
                DateOnly _inBeginDate = DateOnly.FromDateTime(DateTime.Today.AddMonths(-6));
                DateOnly _inEndDate = DateOnly.FromDateTime(DateTime.Today);


                if (inBeginDate is not null)
                {
                    _inBeginDate = DateOnly.FromDateTime(Convert.ToDateTime(inBeginDate));
                }

                if (inEndDate is not null)
                {
                    _inEndDate = DateOnly.FromDateTime(Convert.ToDateTime(inEndDate));
                }

                //var historyData = _context.Registrations.Where(c => c.RegPatientId == inChartNo && (c.RegDate >= _inBeginDate && c.RegDate <= _inEndDate));

                var historyData = from reg in _context.Set<Registration>()
                                  join dept in _context.Set<KmuDepartment>()
                                  on reg.RegDepartment equals dept.DptCode
                                  join user in _context.Set<KmuUser>()
                                  on reg.RegDoctorId equals user.UserIdno
                                  where reg.RegPatientId == inChartNo && (reg.RegDate >= _inBeginDate && reg.RegDate <= _inEndDate)
                                  select new HistoryRecordDto
                                  {
                                      inhospid = reg.Inhospid,
                                      regDate = reg.RegDate.ToDateTime(TimeOnly.Parse("00:00 AM")),
                                      clinicCode = dept.DptCode,
                                      clinicName = dept.DptName,
                                      doctorCode = reg.RegDoctorId,
                                      doctorName = String.Format("{0} {1} {2}", user.UserNameFirstname, user.UserNameMidname, user.UserNameLastname),
                                      sourceType = dept.DptCategory
                                  };

                //測試用記得ban
                //getHistoryRecordDetail(historyData.Select(c => c.inhospid).ToList());

                if (historyData.Any())
                {
                    return historyData.OrderByDescending(c => c.regDate).ToList();
                }
                else
                {
                    return new List<HistoryRecordDto>();
                }
            }
            catch
            {
                return new List<HistoryRecordDto>();
            }
        }


        public List<HistoryRecordDetail> getHistoryRecordDetail(List<string> inhospidList)
        {
            try
            {
                if (inhospidList == null || inhospidList.Count == 0)
                {
                    return new List<HistoryRecordDetail>();
                }
                else
                {
                    using (SoapService service = new SoapService(_context))
                    {
                        List<HistoryRecordDetail> detailList = new List<HistoryRecordDetail>();

                        foreach (var inhospid in inhospidList)
                        {
                            List<ExtendHisrdersoa> soapData_ex = new List<ExtendHisrdersoa>();
                            var soapData = _context.Hisordersoas.Where(c => c.Inhospid == inhospid && c.Status == 'V').ToList();
                            if (soapData != null)
                            {
                                foreach (var obj in soapData)
                                {
                                    soapData_ex.Add(new ExtendHisrdersoa()
                                    {
                                        Inhospid =  obj.Inhospid ,
                                        Soaid =obj.Soaid,
                                        ChartNo = obj.ChartNo,
                                        Context = obj.Context,
                                        Kind =obj.Kind,
                                        SourceType = obj.SourceType,
                                        Status = obj.Status,
                                        CreateUser = obj.CreateUser,
                                        CreateDate = obj.CreateDate,
                                        ModifyDate = obj.ModifyDate,
                                        ModifyUser = obj.ModifyUser,
                                        VersionCode = obj.VersionCode,
                                        pure_context = service.StripHTML(obj.Context)
                                    });

                                }
                            }

                            var diagnosisData = _context.Hisorderplans.Where(c => c.Inhospid == inhospid && c.HplanType == "ICD" && c.DcDate == null).ToList();
                            var medData = _context.Hisorderplans.Where(c => c.Inhospid == inhospid && c.HplanType == "Med" && c.DcDate == null).ToList();
                            var nonmedData = _context.Hisorderplans.Where(c => c.Inhospid == inhospid && (c.HplanType != "Med" && c.HplanType != "ICD") && c.DcDate == null).ToList();

                            detailList.Add(new HistoryRecordDetail()
                            {
                                inhospid = inhospid,
                                soapContext = soapData_ex,
                                DiagnosisContext = diagnosisData,
                                MedicineContext = medData,
                                NonMedContext = nonmedData
                            }); ;

                        }

                        return detailList;
                    }
                }
            }
            catch
            {
                return new List<HistoryRecordDetail>();
            }
        }

        public IActionResult HistoryRecordMastrView(string patientInhospid, string patientPatientid)
        {
            var patientInfo = GetPatientInfo(patientInhospid, patientPatientid);
            //取得歷史病歷頭檔，預設6個月
            var HistoryRecordMaster = getHistoryRecordMaster(patientInfo.RegDate.Value.AddMonths(-6), patientInfo.RegDate, patientInfo.RegPatientId);


            List<HistoryRecordDetail> HistoryRecordDetail = null;
            if (HistoryRecordMaster !=null && HistoryRecordMaster.Count() > 0)
            {
                HistoryRecordDetail =  getHistoryRecordDetail(HistoryRecordMaster.Select(c => c.inhospid).ToList());

            }
          
            ViewData["patientInfo"] = patientInfo;
            ViewData["HistoryRecordMaster"] = HistoryRecordMaster;
            ViewData["HistoryRecordDetail"] = HistoryRecordDetail;

            return PartialView("~/Areas/HisOrder/Views/HisOrder/PartialViews/_HistoryRecordMasterPartialView.cshtml", new ViewDataDictionary(ViewData));
        }


        #endregion
    }

}
